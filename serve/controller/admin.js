var db=require("../dbutil/dbutil");
var sql=require("../dbutil/sql");
var cron=require("node-cron");
var dayjs=require('dayjs');
const now=dayjs()

module.exports={
    //登录
    adminlogin:(req,res)=>{
        
        db.query(sql.t_user.login,[req.body.phone,req.body.pass],(err,results)=>{
            if(err){
                console.log(err);
                
            }else{
                if(results.length>0){
                    res.send({
                        code:200,
                        data:{
                            user:results[0]
                        }
                    })
                }else{
                    res.send({
                        code:201,
                        msg:"用户名或密码错误",
                        data:{
                            user:results[0]
                        }
                    })
                }
            }
        })
    },
    //统计总数
    statistics:(req,res)=>{
        var oneWeekAgo=new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate()-7);
        db.query(sql.charts.select,[oneWeekAgo,oneWeekAgo],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        totalpost:results[0][0],
                            totaluser:results[1][0],
                            lastpost:results[2][0],
                            lastuser:results[3][0]
                        
                    }
                })
            }
        })
    },
    //条形统计图
    columDate:(req,res)=>{
        console.log(111);
            db.query(sql.charts.columnChart,null,(err,results)=>{
                if(err){
                    console.log(err);
                }else{
                    console.log(333);
                    console.log(results[3]); 
                    const objects=results[3]
                    const dataValue={}
                    objects.forEach(obj => {
                        for(let key in obj){
                            if(!dataValue[key]){
                                dataValue[key]=[]  
                            }
                            dataValue[key].push(obj[key])
                        }
                    });
                    const result=Object.values(dataValue)
                    console.log(result);
                    
                    res.send({
                        code:200,
                        data:{
                            column:result
                        }
                    })
                }
            })
    },
    //扇形统计图
    workSectorData:(req,res)=>{
        db.query(sql.charts.workSectorChart,null,(err,results)=>{
            if(err){
                console.log(err);
            }else{
                console.log(results);
                res.send({
                    code:200,
                    data:results
                })
            }
        })
    },
    //扇形统计图2统计图
    userSectorData:(req,res)=>{
        db.query(sql.charts.userSectorChart,null,(err,results)=>{
            if(err){
                console.log(err);
            }else{
                console.log(results);
                res.send({
                    code:200,
                    data:results
                })
            }
        })
    },
    //最新发布作品
    getLatestDate:(req,res)=>{
        db.query(sql.t_post.selectLatest,null,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:results
                })
            }
        })
    },
    //点赞作品
    dolike:(req,res)=>{
        var num=Number(req.query.likenum)+1
        // num=num+1
        console.log('取消');
        console.log(num);
        db.query(sql.t_post.updateDolike,[num,req.query.pid],(err,results)=>{
            if(err){
                console.log(err);
            }else{
                db.query(sql.t_post.selectLikeNum,req.query.pid,(err,results)=>{
                    if(err){
                        res.send({
                            code:500,
                            msg:"服务器内部错误"
                        }) 
                    }else{
                        res.send({
                            code:200,
                            msg:"操作成功",
                            data:results
                        }) 
                    }
                })
            }
        })
        
    },
    //取消点赞
    cancellike:(req,res)=>{
        var num=Number(req.query.likenum)
        num=num-1
        console.log('取消');
        console.log(num);
        
        db.query(sql.t_post.updateDolike,[num,req.query.pid],(err,results)=>{
            if(err){
                console.log(err);
            }else{
                db.query(sql.t_post.selectLikeNum,req.query.pid,(err,results)=>{
                    if(err){
                        res.send({
                            code:500,
                            msg:"服务器内部错误"
                        }) 
                    }else{
                        res.send({
                            code:200,
                            msg:"操作成功",
                            data:results
                        }) 
                    }
                })
            }
        })
        
    },
    //历史发布作品
    getHistorial:(req,res)=>{
        db.query(sql.t_post.selectHistorical,null,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:results
                })
            }
        })
    },
    //问题封禁作品
    getBanned:(req,res)=>{
        db.query(sql.t_banned_work.selectBannedDate,null,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:results
                })
                
            }
        })
    },
    //管理员作品发布
    addPost:(req,res)=>{
        // console.log(req.body);
        var image=req.file.filename;
        var title=req.body.title;
        var des=req.body.des;
        var type=req.body.type;
        var notes=req.body.notes;
        var time=now.format('YYYY-MM-DD HH:mm:ss');
        var status='1';
        var uid=req.body.uid
        var like=0;
        var audit='1';
        var data=[image,title,des,type,notes,time,status,uid,like,audit]
        db.query(sql.t_post.insertPost,data,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"作品新增成功"
                })
            }
        })
    },
    //管理员管理作品
    getUserWorkDate:(req,res)=>{
        db.query(sql.t_post.selectUserWorkData,[req.query.uid,req.query.uid,req.query.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        focus:results[0],
                        like:results[1],
                        works:results[2]
                    }
                })
            }
        })
    },
    //管理员修改作品
    edmitWork:(req,res)=>{
        console.log(req.body);
        console.log(req.file);
        var time=now.format('YYYY-MM-DD HH:mm:ss')
        if(req.file==undefined){
            console.log(111);
            db.query(sql.t_post.updateWork,[req.body.image,req.body.title,req.body.des,req.bodytype,req.body.notes,time,'0',req.body.post_id],(err,results)=>{
                if(err){
                    res.send({
                        code:500,
                        msg:"服务器内部错误"
                    })
                }else{
                    res.send({
                        code:200,
                        msg:"修改成功"
                    })
                }
            })
        }else{
            console.log(222);
            db.query(sql.t_post.updateWork,[req.file.filename,req.body.title,req.body.des,req.bodytype,req.body.notes,time,'0',req.body.post_id],(err,results)=>{
                if(err){
                    res.send({
                        code:500,
                        msg:"服务器内部错误"
                    })
                }else{
                    res.send({
                        code:200,
                        msg:"修改成功"
                    })
                }
            })
        }
        
    },
    //作品详情
    getdetail:(req,res)=>{
        console.log(req.query);
        
       console.log( req.query.post_id);
       
        db.query(sql.t_post.selectPostDetail,[req.query.post_id,req.query.post_id,req.query.post_id],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results[0]);
                console.log(results[1]);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        detail:results[0],
                        comment:results[1],
                        comments:results[2]
                    }
                })
            }
        })
    },
    //封禁作品
    handleBanned:(req,res)=>{
        console.log(req.body);
        var time=now.format('YYYY-MM-DD HH:mm:ss')
        console.log(time);
        console.log(req.body.data.case);
        console.log(req.body.data.pid);
        db.query(sql.t_banned_work.insertBanned,[req.body.data.pid,req.body.data.case,time,1,req.body.data.pid,req.body.data.case,req.body.data.senduid,time,req.body.data.receptionuid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"封禁成功",
                })
            }
        })
    },
    //审核作品
    handleAudit:(req,res)=>{
        db.query(sql.t_post.updateAudit,req.query.pid,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"审核完成",
                })
            }
        })
    },
    //解封
    lifted:(req,res)=>{
        db.query(sql.t_banned_work.updateBanned,[req.query.post_id,req.query.post_id],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"解封完成",
                })
            }
        })
    },
    //查询所有用户
    getUser:(req,res)=>{
        db.query(sql.t_user.selectUser,null,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:results
                })
            }
        })
    },
    //更改用户信息
    edmitUser:(req,res)=>{
        var imageUrl=null
        if(req.file){
            imageUrl=req.file.filename

        }else{
            imageUrl=req.body.imageUrl
        }
        db.query(sql.t_user.updateUser,[req.body.upass,req.body.uname,imageUrl,req.body.usex,req.body.uage,req.body.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"修改成功"
                })
            }
        })
    },
    //获取封禁用户
    getBannedUser:(req,res)=>{
        db.query(sql.t_banned_user.selectUser,null,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results);
                
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:results
                })
            }
        })
    },
    //删除作品
    deleteWork:(req,res)=>{
        db.query(sql.t_post.deletePost,req.query.post_id,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"删除成功"
                })
            }
        })
    },
    //封禁用户
    bannedUser:(req,res)=>{
        var time=now.format('YYYY-MM-DD HH:mm:ss');
        db.query(sql.t_banned_user.insertBannedUser,[req.body.b_uid,time,req.body.expireTime,req.body.case,req.body.b_uid,req.body.case,req.body.uid,time,req.body.b_uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"封禁成功"
                })
            }
        })
    },
    //解除用户封禁
    liftecBannedUser:(req,res)=>{
        console.log(req.query);
        var content='管理员已解除了你的账户';
        var time=now.format('YYYY-MM-DD HH:mm:ss')
        db.query(sql.t_banned_user.liftedBannedUser,[req.query.uid,content,req.query.suid,time,req.query.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"解封成功"
                })
            }
        })
    },
    //删除用户封禁记录
    deleteBannedUser:(req,res)=>{
        console.log(req.query);
        
        db.query(sql.t_banned_user.deleteBannedUser,req.query.bu_id,(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"删除成功"
                })
            }
        })
    },
    //自动解除封禁方法----还未实现
    AutomaticLiftecBannedUser:(req,res)=>{
        cron.schedule('*/1 * * * * *',()=>{
            const time=now.format('YYYY-MM-DD HH:mm:ss');
            const sql=`UPDATE t_user JOIN t_banned_user ON t_user.uid=t_banned_user.uid SET t_user.ustatus='1' WHERE t_banned_user.longtime<?;
                    delete from t_banned_user where longtime<?; `
            db.query(sql,[time,time],(err,results)=>{
                if(err){
                    console.log(err);
                }else{
                    console.log(results);
                }
            })
        })
    },
     //获取消息
    getMessages:(req,res)=>{
        db.query(sql.t_messages.selectMessage,[req.query.uid,0,req.query.uid,req.query.uid,0,req.query.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                console.log(results[1][0].sCount);
                
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        sendData:results[0],
                        sendCount:results[1][0].sCount,
                        receptionData:results[2],
                        receptionCount:results[3][0].rCount
                    }
                })
            }
        })
    },
    //消息已读
    handleReadMessages:(req,res)=>{
        const time=now.format('YYYY-MM-DD HH:mm:ss');
        db.query(sql.t_messages.updateMessage,[time,req.query.mid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                res.send({
                    code:200,
                    msg:"操作成功"
                })
            }
        })
    },
    //消息上一页
    prevPage:(req,res)=>{
        console.log(111);
        const page=Number(req.query.page-2)*5
        console.log(page);
        db.query(sql.t_messages.selectMessage,[req.query.uid,page,req.query.uid,req.query.uid,page,req.query.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                // console.log(results[1][0].sCount);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        sendData:results[0],
                        sendCount:results[1][0].sCount,
                        receptionData:results[2],
                        receptionCount:results[3][0].rCount
                    }
                })
            }
        })
    },
    //消息下一页
    nextPage:(req,res)=>{
        console.log(2222);
        console.log(req.query);
        
        const page=Number(req.query.page)*5
        console.log(page);
        db.query(sql.t_messages.selectMessage,[req.query.uid,page,req.query.uid,req.query.uid,page,req.query.uid],(err,results)=>{
            if(err){
                res.send({
                    code:500,
                    msg:"服务器内部错误"
                })
            }else{
                // console.log(results[1][0].sCount);
                res.send({
                    code:200,
                    msg:"查询成功",
                    data:{
                        sendData:results[0],
                        sendCount:results[1][0].sCount,
                        receptionData:results[2],
                        receptionCount:results[3][0].rCount
                    }
                })
            }
        })
    }
}